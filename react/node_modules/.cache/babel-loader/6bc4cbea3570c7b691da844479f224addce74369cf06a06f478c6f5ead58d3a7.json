{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { createContext, useCallback, useContext, useEffect, useState } from 'react';\nimport { isClient } from '../../helpers/is-client';\nimport { theme } from '../../theme';\nexport const ThemeContext = createContext({\n  theme\n});\nexport const ThemeProvider = ({\n  children,\n  value\n}) => {\n  return _jsx(ThemeContext.Provider, {\n    value: value,\n    children: children\n  });\n};\nexport const useTheme = () => {\n  return useContext(ThemeContext);\n};\nconst prefersColorScheme = () => {\n  if (!isClient()) {\n    return 'light';\n  }\n  return window.matchMedia?.('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';\n};\nexport const useThemeMode = () => {\n  const onToggleMode = () => {\n    const newMode = mode === 'dark' ? 'light' : 'dark';\n    setModeOnBody(newMode);\n    setMode(newMode);\n  };\n  const setModeOnBody = useCallback(mode => {\n    if (!isClient()) {\n      return;\n    }\n    if (mode === 'dark') {\n      document.documentElement.classList.add('dark');\n    } else {\n      document.documentElement.classList.remove('dark');\n    }\n  }, []);\n  const {\n    mode: initialMode,\n    toggleMode = onToggleMode\n  } = useContext(ThemeContext);\n  const [mode, setMode] = useState('light');\n  useEffect(() => {\n    if (initialMode) {\n      setModeOnBody(initialMode);\n      setMode(initialMode);\n    } else {\n      setMode(prefersColorScheme());\n    }\n  }, [initialMode, setModeOnBody, setMode]);\n  return [mode, setMode, toggleMode];\n};","map":{"version":3,"names":["jsx","_jsx","createContext","useCallback","useContext","useEffect","useState","isClient","theme","ThemeContext","ThemeProvider","children","value","Provider","useTheme","prefersColorScheme","window","matchMedia","matches","useThemeMode","onToggleMode","newMode","mode","setModeOnBody","setMode","document","documentElement","classList","add","remove","initialMode","toggleMode"],"sources":["C:/Users/quynh/Desktop/React/test/node_modules/flowbite-react/lib/esm/components/Flowbite/ThemeContext.js"],"sourcesContent":["import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { createContext, useCallback, useContext, useEffect, useState } from 'react';\nimport { isClient } from '../../helpers/is-client';\nimport { theme } from '../../theme';\nexport const ThemeContext = createContext({\n    theme,\n});\nexport const ThemeProvider = ({ children, value }) => {\n    return _jsx(ThemeContext.Provider, { value: value, children: children });\n};\nexport const useTheme = () => {\n    return useContext(ThemeContext);\n};\nconst prefersColorScheme = () => {\n    if (!isClient()) {\n        return 'light';\n    }\n    return window.matchMedia?.('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';\n};\nexport const useThemeMode = () => {\n    const onToggleMode = () => {\n        const newMode = mode === 'dark' ? 'light' : 'dark';\n        setModeOnBody(newMode);\n        setMode(newMode);\n    };\n    const setModeOnBody = useCallback((mode) => {\n        if (!isClient()) {\n            return;\n        }\n        if (mode === 'dark') {\n            document.documentElement.classList.add('dark');\n        }\n        else {\n            document.documentElement.classList.remove('dark');\n        }\n    }, []);\n    const { mode: initialMode, toggleMode = onToggleMode } = useContext(ThemeContext);\n    const [mode, setMode] = useState('light');\n    useEffect(() => {\n        if (initialMode) {\n            setModeOnBody(initialMode);\n            setMode(initialMode);\n        }\n        else {\n            setMode(prefersColorScheme());\n        }\n    }, [initialMode, setModeOnBody, setMode]);\n    return [mode, setMode, toggleMode];\n};\n"],"mappings":"AAAA,SAASA,GAAG,IAAIC,IAAI,QAAQ,mBAAmB;AAC/C,SAASC,aAAa,EAAEC,WAAW,EAAEC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AACnF,SAASC,QAAQ,QAAQ,yBAAyB;AAClD,SAASC,KAAK,QAAQ,aAAa;AACnC,OAAO,MAAMC,YAAY,GAAGP,aAAa,CAAC;EACtCM;AACJ,CAAC,CAAC;AACF,OAAO,MAAME,aAAa,GAAGA,CAAC;EAAEC,QAAQ;EAAEC;AAAM,CAAC,KAAK;EAClD,OAAOX,IAAI,CAACQ,YAAY,CAACI,QAAQ,EAAE;IAAED,KAAK,EAAEA,KAAK;IAAED,QAAQ,EAAEA;EAAS,CAAC,CAAC;AAC5E,CAAC;AACD,OAAO,MAAMG,QAAQ,GAAGA,CAAA,KAAM;EAC1B,OAAOV,UAAU,CAACK,YAAY,CAAC;AACnC,CAAC;AACD,MAAMM,kBAAkB,GAAGA,CAAA,KAAM;EAC7B,IAAI,CAACR,QAAQ,CAAC,CAAC,EAAE;IACb,OAAO,OAAO;EAClB;EACA,OAAOS,MAAM,CAACC,UAAU,GAAG,8BAA8B,CAAC,CAACC,OAAO,GAAG,MAAM,GAAG,OAAO;AACzF,CAAC;AACD,OAAO,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAC9B,MAAMC,YAAY,GAAGA,CAAA,KAAM;IACvB,MAAMC,OAAO,GAAGC,IAAI,KAAK,MAAM,GAAG,OAAO,GAAG,MAAM;IAClDC,aAAa,CAACF,OAAO,CAAC;IACtBG,OAAO,CAACH,OAAO,CAAC;EACpB,CAAC;EACD,MAAME,aAAa,GAAGpB,WAAW,CAAEmB,IAAI,IAAK;IACxC,IAAI,CAACf,QAAQ,CAAC,CAAC,EAAE;MACb;IACJ;IACA,IAAIe,IAAI,KAAK,MAAM,EAAE;MACjBG,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACC,GAAG,CAAC,MAAM,CAAC;IAClD,CAAC,MACI;MACDH,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACE,MAAM,CAAC,MAAM,CAAC;IACrD;EACJ,CAAC,EAAE,EAAE,CAAC;EACN,MAAM;IAAEP,IAAI,EAAEQ,WAAW;IAAEC,UAAU,GAAGX;EAAa,CAAC,GAAGhB,UAAU,CAACK,YAAY,CAAC;EACjF,MAAM,CAACa,IAAI,EAAEE,OAAO,CAAC,GAAGlB,QAAQ,CAAC,OAAO,CAAC;EACzCD,SAAS,CAAC,MAAM;IACZ,IAAIyB,WAAW,EAAE;MACbP,aAAa,CAACO,WAAW,CAAC;MAC1BN,OAAO,CAACM,WAAW,CAAC;IACxB,CAAC,MACI;MACDN,OAAO,CAACT,kBAAkB,CAAC,CAAC,CAAC;IACjC;EACJ,CAAC,EAAE,CAACe,WAAW,EAAEP,aAAa,EAAEC,OAAO,CAAC,CAAC;EACzC,OAAO,CAACF,IAAI,EAAEE,OAAO,EAAEO,UAAU,CAAC;AACtC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}